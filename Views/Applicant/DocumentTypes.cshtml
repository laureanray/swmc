@{
    ViewData["Title"] = "Applicants";
    Layout = "_DashboardLayout";
}

<div class="container-fluid">
    <h3> Document Types  </h3>
    <div class="row mt-3">
        <div class="col">
            <button class="btn btn-success" data-toggle="modal" data-target="#addModal"><i class="fas fa-fw fa-plus"></i> Add New </button>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col">

            <table id="documentTypesTable" class="display">
                <thead>
                <tr>
                    <th>ID</th>
                    <th>Document Type Name</th>
                    <th>Issuer</th>    
                    <th>Date Created</th>
                    <th>Date Updated</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
               
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Archive MOdal Modal -->
<div class="modal fade" id="archiveModal" tabindex="-1" role="dialog" aria-labelledby="archiveModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="archiveModalLabel">Archive Applicant</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
          Are you sure you want to archive applicant?
          <input type="hidden" id="applicantToArchive" >
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
        <button type="button" id="archiveBtn" class="btn btn-danger">Archive</button>
      </div>
    </div>
  </div>
</div>


<!-- Add Document Type  Modal -->
<div class="modal fade" id="addModal" tabindex="-1" role="dialog" aria-labelledby="addModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addModalLabel">Create New </h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form>
          <div class="row">
              <div class="col">
                  <label for=""> Document Type Name </label>
                  <input type="text" class="form-control" id="documentTypeName" placeholder="Document Type Name">
              </div>
              <div class="col">
                  <label for=""> Issuer </label>
                  <input type="text" class="form-control" id="issuer" placeholder="Issuer">
              </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
        <button type="button" id="createBtn" class="btn btn-success" disabled>Create</button>
      </div>
    </div>
  </div>
</div>

<script >
    
    function archiveApplicant(applicantId, callback){
        $.ajax({
            type: 'GEt',
            url: '/api/Applicant/ArchiveDocumentType?applicantId=' + applicantId,
            contentType: 'application/json; charset=utf-8',
            success: callback,
            error: function(err){
            }
        })
    }
    
    function initDataTable(data){
        for(var i = 0; i < data.length; i++){
            data[i].controls = "<button class='btn btn-outline-danger archive' data-id='"+ data[i].applicantId +"'> Archive </button> " +
                               "<button class='btn btn-outline-secondary update' data-id='" + data[i].applicantId + "'> Update </button>";
        }
        table = $("#documentTypesTable").DataTable({
            data: data,
            columns: [
                { "data": "documentTypeId"},
                { "data": "documentTypeName" },
                { "data": "issuer" },
                { "data": "dateCreated" },
                { "data": "dateUpdated" },
                { "data": "controls"}
            ],
            destroy: true,
            drawCallback: function(settings){
                $(".archive").off();
                $(".archive").click(function(){
                   var id = $(this).data('id');
                   $("#applicantToArchive").val(id);
                   $("#archiveModal").modal("show");
                });
            }      
        });
       
    }
    
    function getData(callback){
        $.ajax({
            type: 'GET',
            dataType: 'json',
            url: '/api/Applicant/GetDocumentTypes',
            success: function(data){
                callback(data);
            },
            error: function(err){
                console.log(err);
            }
        })
    }
    
    
    function init(){
          getData(function(data){
                console.log(data);
                initDataTable(data);
                $('#documentTypesTable tbody').off();
                $('#documentTypesTable tbody').on('click', 'td.details-control', function () {
                        var tr = $(this).closest('tr');
                        var row = table.row( tr );
                        if ( row.child.isShown() ) {
                            // This row is already open - close it
                            row.child.hide();
                            tr.removeClass('shown');
                        }
                        else {
                            // Open this row
                            row.child( format(row.data()) ).show();
                            tr.addClass('shown');
                        }
                    } );
            });
    }
    
    function addDocumentType(data, callback){
        $.ajax({
            type: 'POST',
            url: '/api/Applicant/AddDocumentType',
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(data),
            success: callback,
            error: function(err){
            }
        });
    }
  
    
    $("#archiveBtn").click(function(){
       $(this).html("Archiving...");
       $(this).prop('disabled', true);
       setTimeout(function(){
           archiveApplicant($("#applicantToArchive").val(), function(res){
                console.log(res); 
                if(res.message === "Success"){
                    $(this).html("Archive");
                    $(this).prop('disabled', false) ;
                    $("#archiveModal").modal("hide");
                    init();
                }
           });
       }, 500);
    });
    
    $("#createBtn").click(function(){
         $(this).prop('disabled', true);
         $(this).html("Creating...");
         
         var data = {
             documentTypeName: $("#documentTypeName").val(),
             issuer: $("#issuer").val()
         };
         
         addDocumentType(data, function(res){
              if(res.message === "Success"){
                    $(this).prop('disabled', false);
                    $(this).html("Create");
                    $("#addModal").modal("hide");
                    init();
              } 
         });
         
    });
    
    $("#addModal input").keyup(function(){
        if($("#documentTypeName").val().length > 0 &&
           $("#issuer").val().length > 0){
            $("#createBtn").prop("disabled", false);
        }else{
            $("#createBtn").prop("disabled", true);
        }
    });
    
    
    init();
</script>