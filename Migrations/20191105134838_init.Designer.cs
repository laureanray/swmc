// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using swmc.Data;

namespace swmc.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191105134838_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("swmc.Models.Applicant", b =>
                {
                    b.Property<int>("ApplicantId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("Age");

                    b.Property<string>("Cellphone")
                        .IsRequired();

                    b.Property<string>("Citizenship")
                        .IsRequired();

                    b.Property<string>("CivilStatus")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<int?>("EmbarkationId");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<int>("Height");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("LastSchoolAttended")
                        .IsRequired();

                    b.Property<string>("MiddleName")
                        .IsRequired();

                    b.Property<byte[]>("Photo");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired();

                    b.Property<int>("PositionId");

                    b.Property<string>("Religion")
                        .IsRequired();

                    b.Property<string>("SchoolFrom")
                        .IsRequired();

                    b.Property<string>("SchoolTo")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.Property<string>("Suffix");

                    b.Property<string>("Telephone")
                        .IsRequired();

                    b.Property<int>("Weight");

                    b.HasKey("ApplicantId");

                    b.HasIndex("EmbarkationId");

                    b.HasIndex("PositionId");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("swmc.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("swmc.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("swmc.Models.Dependent", b =>
                {
                    b.Property<int>("DependentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<int>("ApplicantId");

                    b.Property<string>("Name");

                    b.Property<string>("Relationship");

                    b.HasKey("DependentId");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Dependent");
                });

            modelBuilder.Entity("swmc.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantId");

                    b.Property<DateTime>("DateExpiry");

                    b.Property<DateTime>("DateSubmitted");

                    b.Property<int>("DocumentTypeId");

                    b.HasKey("DocumentId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("swmc.Models.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("DocumentTypeName")
                        .IsRequired();

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Issuer")
                        .IsRequired();

                    b.HasKey("DocumentTypeId");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("swmc.Models.Embarkation", b =>
                {
                    b.Property<int>("EmbarkationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmbarkationStatus");

                    b.Property<int>("RequestId");

                    b.HasKey("EmbarkationId");

                    b.HasIndex("RequestId");

                    b.ToTable("Embarkations");
                });

            modelBuilder.Entity("swmc.Models.Family", b =>
                {
                    b.Property<int>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantId");

                    b.Property<string>("FathersFirstName")
                        .IsRequired();

                    b.Property<string>("FathersLastName")
                        .IsRequired();

                    b.Property<string>("FathersMiddleName")
                        .IsRequired();

                    b.Property<string>("FathersSuffix");

                    b.Property<string>("MothersFirstName")
                        .IsRequired();

                    b.Property<string>("MothersLastName")
                        .IsRequired();

                    b.Property<string>("MothersMiddleName")
                        .IsRequired();

                    b.Property<string>("MothersSuffix");

                    b.Property<string>("NumberOfChildren");

                    b.Property<string>("SpouseFirstName")
                        .IsRequired();

                    b.Property<string>("SpouseLastName")
                        .IsRequired();

                    b.Property<string>("SpouseMiddleName")
                        .IsRequired();

                    b.Property<string>("SpouseSuffix");

                    b.HasKey("FamilyId");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("Families");
                });

            modelBuilder.Entity("swmc.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("PositionCode");

                    b.Property<string>("PositionName")
                        .IsRequired();

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("swmc.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Destination");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Remarks");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("VesselId");

                    b.HasKey("RequestId");

                    b.HasIndex("VesselId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("swmc.Models.Requirement", b =>
                {
                    b.Property<int>("RequirementId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PositionId");

                    b.Property<int>("Quantity");

                    b.Property<int?>("RequestId");

                    b.HasKey("RequirementId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RequestId");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("swmc.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicantId");

                    b.Property<int?>("RequirementId");

                    b.Property<string>("SkillName");

                    b.HasKey("SkillId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("RequirementId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("swmc.Models.Vessel", b =>
                {
                    b.Property<int>("VesselId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CBA");

                    b.Property<string>("Classification");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("EngineMake")
                        .IsRequired();

                    b.Property<string>("Flag")
                        .IsRequired();

                    b.Property<string>("GrossTonnage")
                        .IsRequired();

                    b.Property<string>("HorsePower");

                    b.Property<string>("IMONumber");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("JSU")
                        .IsRequired();

                    b.Property<string>("OfficialNumber");

                    b.Property<string>("PortRegistry");

                    b.Property<string>("Principal")
                        .IsRequired();

                    b.Property<string>("Type");

                    b.Property<string>("VesselAbr");

                    b.Property<string>("VesselName")
                        .IsRequired();

                    b.Property<string>("YearBuilt");

                    b.Property<string>("YearEnrolled");

                    b.HasKey("VesselId");

                    b.ToTable("Vessels");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("swmc.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("swmc.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("swmc.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("swmc.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("swmc.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("swmc.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("swmc.Models.Applicant", b =>
                {
                    b.HasOne("swmc.Models.Embarkation")
                        .WithMany("Applicants")
                        .HasForeignKey("EmbarkationId");

                    b.HasOne("swmc.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("swmc.Models.Dependent", b =>
                {
                    b.HasOne("swmc.Models.Applicant")
                        .WithMany("Dependents")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("swmc.Models.Document", b =>
                {
                    b.HasOne("swmc.Models.Applicant")
                        .WithMany("Documents")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("swmc.Models.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("swmc.Models.Embarkation", b =>
                {
                    b.HasOne("swmc.Models.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("swmc.Models.Family", b =>
                {
                    b.HasOne("swmc.Models.Applicant")
                        .WithOne("Family")
                        .HasForeignKey("swmc.Models.Family", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("swmc.Models.Request", b =>
                {
                    b.HasOne("swmc.Models.Vessel", "Vessel")
                        .WithMany()
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("swmc.Models.Requirement", b =>
                {
                    b.HasOne("swmc.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("swmc.Models.Request")
                        .WithMany("Requirements")
                        .HasForeignKey("RequestId");
                });

            modelBuilder.Entity("swmc.Models.Skill", b =>
                {
                    b.HasOne("swmc.Models.Applicant")
                        .WithMany("Skills")
                        .HasForeignKey("ApplicantId");

                    b.HasOne("swmc.Models.Requirement")
                        .WithMany("Skills")
                        .HasForeignKey("RequirementId");
                });
#pragma warning restore 612, 618
        }
    }
}
